format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  # if you want to use/test the force-code-sign mode
  - BITRISE_CODE_SIGN_IDENTITY: $BITRISE_CODE_SIGN_IDENTITY
  - BITRISE_PROVISIONING_PROFILE_ID: $BITRISE_PROVISIONING_PROFILE_ID

workflows:
  test_objc:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - XCODE_OUTPUT_TOOL: xcodebuild
    after_run:
    - _run
    - _check_outputs

  test_xcactivitylog:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_11 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_11" "true"}}'
        inputs:
        - workflow_id: utility_test_xcactivitylog
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_xcactivitylog:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye  
    - XCODE_OUTPUT_TOOL: xcpretty
    - XCODE_ADDITIONAL_OPTIONS: OTHER_SWIFT_FLAGS="-Xfrontend -debug-time-function-bodies"
    after_run:
    - _run
    - _check_outputs
    - _parse_xcactivitylog

  _run:
    steps:
    - script:
        title: Remove temporary directory
        inputs:
        - content: rm -rf "$BITRISE_SOURCE_DIR/_tmp"
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        title: Clone test app
        inputs:
          - repository_url: $TEST_APP_URL
          - clone_into_dir: ./_tmp
          - branch: $TEST_APP_BRANCH
    - path::./:
        title: Self-test
        inputs:
        - is_clean_build: "no"
        - project_path: ./_tmp/$BITRISE_PROJECT_PATH
        - output_tool: $XCODE_OUTPUT_TOOL
        - force_code_sign_identity: $BITRISE_CODE_SIGN_IDENTITY
        - force_provisioning_profile: $BITRISE_PROVISIONING_PROFILE_ID
        - xcodebuild_options: $XCODE_ADDITIONAL_OPTIONS

  _check_outputs:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-check-step-outputs.git@main:
        title: Check outputs
        is_always_run: true
        inputs:
        - envs:
        - files:
        - dirs: |-
            BITRISE_XCRESULT_PATH
        - deployed_files:
        - deployed_dirs:

  _parse_xcactivitylog:
    steps:
    - script:
        deps:
          brew:
          - name: xclogparser
        inputs:
        - content: |-
            set -ex
            xclogparser parse --project $BITRISE_SCHEME --reporter html --output ./xcbuildlogparser
            zip -r $BITRISE_DEPLOY_DIR/activity_logs.zip ./xcbuildlogparser
            echo "Deploy dir: $BITRISE_DEPLOY_DIR"

  _expose_xcode_version:
    steps:
    - script:
        title: Expose Xcode major version
        inputs:
        - content: |-
            #!/bin/env bash
            set -e

            if [[ ! -z "$XCODE_MAJOR_VERSION" ]]; then
              echo "Xcode major version already exposed: $XCODE_MAJOR_VERSION"
              exit 0
            fi

            version=`xcodebuild -version`
            regex="Xcode ([0-9]*)."
            if [[ ! $version =~ $regex ]]; then
              echo "Failed to determine Xcode major version"
              exit 1
            fi

            xcode_major_version=${BASH_REMATCH[1]}
            echo "Xcode major version: $xcode_major_version"
            envman add --key XCODE_MAJOR_VERSION --value $xcode_major_version